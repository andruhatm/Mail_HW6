/*
 * This file is generated by jOOQ.
 */
package db.tables.daos;


import db.tables.Organization;
import db.tables.records.OrganizationRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrganizationDao extends DAOImpl<OrganizationRecord, db.tables.pojos.Organization, Integer> {

    /**
     * Create a new OrganizationDao without any configuration
     */
    public OrganizationDao() {
        super(Organization.ORGANIZATION, db.tables.pojos.Organization.class);
    }

    /**
     * Create a new OrganizationDao with an attached configuration
     */
    public OrganizationDao(Configuration configuration) {
        super(Organization.ORGANIZATION, db.tables.pojos.Organization.class, configuration);
    }

    @Override
    public Integer getId(db.tables.pojos.Organization object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.Organization> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Organization.ORGANIZATION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<db.tables.pojos.Organization> fetchById(Integer... values) {
        return fetch(Organization.ORGANIZATION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public db.tables.pojos.Organization fetchOneById(Integer value) {
        return fetchOne(Organization.ORGANIZATION.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.Organization> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Organization.ORGANIZATION.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<db.tables.pojos.Organization> fetchByName(String... values) {
        return fetch(Organization.ORGANIZATION.NAME, values);
    }

    /**
     * Fetch records that have <code>inn BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.Organization> fetchRangeOfInn(String lowerInclusive, String upperInclusive) {
        return fetchRange(Organization.ORGANIZATION.INN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>inn IN (values)</code>
     */
    public List<db.tables.pojos.Organization> fetchByInn(String... values) {
        return fetch(Organization.ORGANIZATION.INN, values);
    }

    /**
     * Fetch records that have <code>checking_acc BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.Organization> fetchRangeOfCheckingAcc(String lowerInclusive, String upperInclusive) {
        return fetchRange(Organization.ORGANIZATION.CHECKING_ACC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>checking_acc IN (values)</code>
     */
    public List<db.tables.pojos.Organization> fetchByCheckingAcc(String... values) {
        return fetch(Organization.ORGANIZATION.CHECKING_ACC, values);
    }
}
