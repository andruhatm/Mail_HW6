/*
 * This file is generated by jOOQ.
 */
package db.tables.daos;


import db.tables.WaybillItems;
import db.tables.records.WaybillItemsRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WaybillItemsDao extends DAOImpl<WaybillItemsRecord, db.tables.pojos.WaybillItems, Integer> {

    /**
     * Create a new WaybillItemsDao without any configuration
     */
    public WaybillItemsDao() {
        super(WaybillItems.WAYBILL_ITEMS, db.tables.pojos.WaybillItems.class);
    }

    /**
     * Create a new WaybillItemsDao with an attached configuration
     */
    public WaybillItemsDao(Configuration configuration) {
        super(WaybillItems.WAYBILL_ITEMS, db.tables.pojos.WaybillItems.class, configuration);
    }

    @Override
    public Integer getId(db.tables.pojos.WaybillItems object) {
        return object.getItemId();
    }

    /**
     * Fetch records that have <code>item_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.WaybillItems> fetchRangeOfItemId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WaybillItems.WAYBILL_ITEMS.ITEM_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>item_id IN (values)</code>
     */
    public List<db.tables.pojos.WaybillItems> fetchByItemId(Integer... values) {
        return fetch(WaybillItems.WAYBILL_ITEMS.ITEM_ID, values);
    }

    /**
     * Fetch a unique record that has <code>item_id = value</code>
     */
    public db.tables.pojos.WaybillItems fetchOneByItemId(Integer value) {
        return fetchOne(WaybillItems.WAYBILL_ITEMS.ITEM_ID, value);
    }

    /**
     * Fetch records that have <code>waybill_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.WaybillItems> fetchRangeOfWaybillId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WaybillItems.WAYBILL_ITEMS.WAYBILL_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>waybill_id IN (values)</code>
     */
    public List<db.tables.pojos.WaybillItems> fetchByWaybillId(Integer... values) {
        return fetch(WaybillItems.WAYBILL_ITEMS.WAYBILL_ID, values);
    }

    /**
     * Fetch records that have <code>quantity BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.WaybillItems> fetchRangeOfQuantity(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WaybillItems.WAYBILL_ITEMS.QUANTITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>quantity IN (values)</code>
     */
    public List<db.tables.pojos.WaybillItems> fetchByQuantity(Integer... values) {
        return fetch(WaybillItems.WAYBILL_ITEMS.QUANTITY, values);
    }

    /**
     * Fetch records that have <code>nomenclature BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.WaybillItems> fetchRangeOfNomenclature(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WaybillItems.WAYBILL_ITEMS.NOMENCLATURE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>nomenclature IN (values)</code>
     */
    public List<db.tables.pojos.WaybillItems> fetchByNomenclature(Integer... values) {
        return fetch(WaybillItems.WAYBILL_ITEMS.NOMENCLATURE, values);
    }

    /**
     * Fetch records that have <code>price BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.WaybillItems> fetchRangeOfPrice(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(WaybillItems.WAYBILL_ITEMS.PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    public List<db.tables.pojos.WaybillItems> fetchByPrice(Double... values) {
        return fetch(WaybillItems.WAYBILL_ITEMS.PRICE, values);
    }
}
