/*
 * This file is generated by jOOQ.
 */
package db.tables.daos;


import db.tables.Nomenclature;
import db.tables.records.NomenclatureRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NomenclatureDao extends DAOImpl<NomenclatureRecord, db.tables.pojos.Nomenclature, Integer> {

    /**
     * Create a new NomenclatureDao without any configuration
     */
    public NomenclatureDao() {
        super(Nomenclature.NOMENCLATURE, db.tables.pojos.Nomenclature.class);
    }

    /**
     * Create a new NomenclatureDao with an attached configuration
     */
    public NomenclatureDao(Configuration configuration) {
        super(Nomenclature.NOMENCLATURE, db.tables.pojos.Nomenclature.class, configuration);
    }

    @Override
    public Integer getId(db.tables.pojos.Nomenclature object) {
        return object.getNomenclatureId();
    }

    /**
     * Fetch records that have <code>nomenclature_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.Nomenclature> fetchRangeOfNomenclatureId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Nomenclature.NOMENCLATURE.NOMENCLATURE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>nomenclature_id IN (values)</code>
     */
    public List<db.tables.pojos.Nomenclature> fetchByNomenclatureId(Integer... values) {
        return fetch(Nomenclature.NOMENCLATURE.NOMENCLATURE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>nomenclature_id = value</code>
     */
    public db.tables.pojos.Nomenclature fetchOneByNomenclatureId(Integer value) {
        return fetchOne(Nomenclature.NOMENCLATURE.NOMENCLATURE_ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.Nomenclature> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Nomenclature.NOMENCLATURE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<db.tables.pojos.Nomenclature> fetchByName(String... values) {
        return fetch(Nomenclature.NOMENCLATURE.NAME, values);
    }

    /**
     * Fetch records that have <code>serial_number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<db.tables.pojos.Nomenclature> fetchRangeOfSerialNumber(String lowerInclusive, String upperInclusive) {
        return fetchRange(Nomenclature.NOMENCLATURE.SERIAL_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>serial_number IN (values)</code>
     */
    public List<db.tables.pojos.Nomenclature> fetchBySerialNumber(String... values) {
        return fetch(Nomenclature.NOMENCLATURE.SERIAL_NUMBER, values);
    }
}
